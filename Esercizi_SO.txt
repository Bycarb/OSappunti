***esercizio B1  'rimpiazza contatore con valore in file' ***
il programma riceve via parametri a riga di comando il nome del file da processare

modificare il file in questo modo: 
ogni volta che compare la stringa di caratteri "*CONTATORE*" questa va sostituita con numero intero fornito da un contatore 
che si incrementa ad ogni sostituzione (il contatore parte da zero).

esempio:

Lorem ipsum at *CONTATORE* donec urna aenean ornare hac condimentum nulla, amet aliquet dapibus orci cursus semper nostra dictum, lorem imperdiet interdum ad sit dui ut  litora.
Tortor lacus ut velit ad enim *CONTATORE*scelerisque viverra pellentesque, curae  ut leo bibendum turpis convallis risus urna ad, aenean mattis dapibus  
pretium luctus vestibulum *CONTATORE*dictum ut tempus conubia sit donec lobortis 
conubia pellentesque venenatis enim. Posuere primis sagittis molestie*CONTATORE* ut dapibus, molestie mauris quis  rutrum ma*CONTATORE*ecenas, 
arcu phasellus nullam nisl metus dapibus elementum  tempus tristique leo risus sollicitudin. 

(in questo esempio, la stringa di caratteri *CONTATORE* compare 5 volte)


il file viene sovrascritto e diventerà:

Lorem ipsum at 0 donec urna aenean ornare hac condimentum nulla, amet aliquet dapibus orci cursus semper nostra dictum, lorem imperdiet interdum ad sit dui ut  litora.
Tortor lacus ut velit ad enim 1scelerisque viverra pellentesque, curae  ut leo bibendum turpis convallis risus urna ad, aenean mattis dapibus 
pretium luctus vestibulum 2dictum ut tempus conubia sit donec lobortis 
conubia pellentesque venenatis enim.
Posuere primis sagittis molestie3 ut dapibus, molestie mauris quis  rutrum ma4ecenas, arcu phasellus nullam nisl metus dapibus elementum tempus tristique leo risus sollicitudin. 


***esercizio B2  'zip 1'  ***
Scrivere un programma che prende come parametro un nome di file da creare (nome_file)
Legge i dati da stdin e li fa comprimere dall’utility zip nell’archivio compresso nome_file
Esempio di comando bash che comprime la stringa ‘foo bar’ immagazzinandola in un un archivio compresso chiamato nome_file.zip (l’estensione .zip viene aggiunta automaticamente)
echo 'foo bar' | zip -q nome_file –


***esercizio B3  'zip 2'  ***
Scrivere un programma che prende come parametro un nome di file da creare (nome_file)
Legge i dati da stdin e li fa comprimere dall’utility zip nell’archivio compresso nome_file
Quando l’utente digita Ctrl-C, il programma termina il processo zip, e mostra la dimensione dell’archivio compresso (ovvero lancia il comando ls -l nome_file.zip), poi termina.
 Esempio di comando bash che comprime la stringa ‘foo bar’ immagazzinandola in un un archivio compresso chiamato nome_file.zip (l’estensione .zip viene aggiunta automaticamente)
echo 'foo bar' | zip -q nome_file -


***esercizio B4  'due processi'  *** 
Due processi: A (parent) e B (child), condividono un file aperto in modalità scrittura (e quindi anche l'offset del file).
il processo A fa l'append di una riga di testo al file; dorme un secondo; comunica al processo B di continuare. Il processo A aspetta.
il processo B, a sua volta, fa l'append di una riga di testo allo stesso file; dorme un secondo; comunica al processo A di continuare. Il processo B aspetta.
Quando il processo A ha scritto la centesima riga ,manda un segnale di terminazione al processo B, aspetta che B termini e poi termina anche A.


***esercizio B5  'fork di 20 processi'  ***
Ogni processo può fare il fork di al più altri 2 processi 
Avviare un totale di 20 processi, usando un contatore condiviso tra i processi
Usare un semaforo per regolare l'accesso concorrente al contatore da parte dei processi

(il contatore ha valore iniziale 0)
processo iniziale incrementa crea due processi P1 e P2; 
P1 crea due processi P3 e P4;
P2 crea due processi P5 e P6;
P3 crea due process....
(prima di ogni singolo fork(), viene controllato il valore del contatore (deve essere < 20) ed incrementato il contatore condiviso)


***esercizio B6  'scrittura su file da parte di più processi'  ***
Scrivere un programma che: 
crea un file di dimensione N bytes nella cartella dei file temporanei /tmp/
#define N (256*16)
#define M 16

il programma crea M processi: il processo i-mo scrive il carattere ‘A’+i  in una parte del file di dimensione N / M bytes, con offset pari a i * N/M.


***esercizio B7  'ricerca in file con più processi'  ***
Il programma prende tre parametri: un nome di file, un numero intero > 0 (M), una stringa di caratteri S da cercare nel file
All’interno di un file passato come argomento al programma, questo crea M processi
Ciascun processo cerca nel pezzo di file assegnato la stringa S (se la trova, scrive a video l’offset della stringa nel file)
Ciascun processo opera su un pezzo del file di dimensione pari a file_size/M + K (con K >=0 tale che se la stringa S è a cavallo di due pezzi contigui, S venga trovata)


***esercizio B8***
Il processo principale origina due processi figli A e B
Il processo A «produce» un risultato: RA
Il processo B «produce» un risultato: RB
Il processo principale aspetta la conclusione dei due processi A e B; quando entrambi hanno concluso l’esecuzione, concatena RA e RB e scrive il risultato sull’output. 

RA e RB sono stringhe di caratteri


***esercizio B9***
partire dall'esempio: https://github.com/marcotessarotto/pafft
(è un programma che registra audio dal microfono del computer, calcola la fft e mostra quella che dovrebbe essere la frequenza con ampiezza maggiore;
bisognerebbe aggiungere un filtro per migliorare il risultato)

nota: per estrarre tramite git il codice sorgente dell'esempio sopra, usare il comando:

git clone --recurse-submodules https://github.com/marcotessarotto/pafft


Scrivere dei programmi in modo tale che un comando di questo tipo sia analogo a pafft:
recordaudio | do_fft | lookup_max_freq
recordaudio: legge da «audio in» e scrive lo stream su stdout
do_fft: legge da stdin i dati nel dominio del tempo, calcola la fft e la scrive su stdout
lookup_max_freq : legge lo spettro e cerca la frequenza per cui si ha il massimo assoluto; scrive il risultato su stdout


***esercizio B10***
Scrivere un programma che genera ed invia su audio out un segnale audio fatta da un'onda sinusoidale, freq. 440 Hz.
Utilizzare:
https://freedesktop.org/software/pulseaudio/doxygen/pacat-simple_8c-example.html

usare da https://github.com/marcotessarotto/pafft/blob/master/src/pafft.c : 
void populate_audio_buf(uint16_t * buf, int size, int freq, int sampling_frequency);


***esercizio B11***
il programma legge da stdin una riga alla volta fino a EOF 
una volta lette tutte le righe, fa il sort in ordine crescente delle righe;
scrive le righe ordinate su stdout

vedere esempio:
https://github.com/marcotessarotto/exOpSys/blob/master/041qsortstr/qsortstr.c


***esercizio B12***
il programma riceve come parametro a riga di comando il percorso di una directory 
su cui farà la seguente verifica:

sulla directory fornita, va a scorrere tutti i file della directory e sui soli file che appartengono 
allo stesso effective user del processo corrente, fa la seguente verifica sui permessi per il "resto del mondo":
se "il resto del mondo" ha permessi di scrittura, scrive su stdout il percorso completo del file (usare realpath).




*** esercizio C01 *** produttore di cookies a velocità variabile
[difficoltà: medio]

il programma ha un contatore che parte da zero.
è definita una variabile globale che si chiama machine_state; machine_state ha due stati possibili: 0 ed 1.
se machine_state == 0, il programma non produce cookies; se machine_state == 1, il produce cookies.

(quando machine_state == 1) il programma scrive su stdout il valore corrente del contatore, incrementa il contatore e poi dorme per "dt" millisecondi. 
all'avvio del programm, dt = 1000. 
deve valere sempre la condizione: dt > 0
deve valere sempre la condizione: dt <= 10000

ogni volta che il programma riceve SIGUSR1, "dt" viene decrementato di 100.
ogni volta che il programma riceve SIGUSR2, "dt" viene incrementato di 100.
ogni volta che il programma riceve SIGTERM, machine_state cambia stato (se machine_state == 0 allora machine_state = 1 etc)



*** esercizio C02 *** random cookies
[difficoltà: medio]

un "cookie" è una stringa di caratteri di lunghezza 32, composto da caratteri casuali.
usare la system call getrandom (man 2 getrandom) per ottenere i caratteri casuali.

sono definite le variabili globali:
char buffer[32];
int cookie_counter;

#define N 1024

il programma ha un thread t1 che fa quanto segue:
(i seguenti passaggi sono iterati per N volte; poi fa terminare il programma)
- produce un cookie
- lo scrive in buffer
- "segnala" al thread t2 di "consumare" il cookie
- quanto t2 "ha consumato" il cookie, continua

il thread t2 fa quanto segue:
(i seguenti passaggi sono iterati)
- ogni volta che t1 lo avvisa che è pronto un cookie, incrementa cookie_counter
- (opzionale) accoda cookie al file "log.dat"
- "segnala" al thread t1 di procedere



*** esercizio C03 *** copia di file con mmap ***
[difficoltà: facile]
copiare un file usando la system call mmap (in entrambe le fasi: leggere il file sorgente, scrivere il file destinazione)
[cosa fare se il file sorgente coincide con il file destinazione?]



*** esercizio C04 *** doppia pipe
[difficoltà: medio]

il programma calcola il digest di sha256 di un file regolare, utilizzando un processo figlio che fà tutto il calcolo; la comunicazione tra i due processi avviene tramite due pipe, una per inviare i dati al processo figlio (il contenuto del file) e l'altra pipe per inviare il digest al processo padre.

processo padre crea due pipe:
pipe_tx per trasmettere dati al processo figlio
pipe_rx per ricevere dati dal processo figlio

il processo padre un file (ad esempio: scaricate ed usate https://github.com/marcotessarotto/exOpSys/blob/master/res/text01.txt)

il processo padre manda, usando pipe_tx,  un "pacchetto" dati (vedere sotto packet_t) così organizzato:
4 byte iniziali (unsigned int) che specifica la lunghezza dei dati (array di char) che 
vengono inviati subito dopo.

typedef struct {
   char * data;
   unsigned int len;
   } packet_t;
   
alla ricezione di un pacchetto dati, il processo figlio calcola sha256 e trasmette, usando pipe_rx, il digest al processo padre (usando lo stessa organizzazione dei dati della trasmissione vista sopra)

il processo padre riceve il digest e scrive su stdout una cosa del genere:
"file xyz
sha256 digest: <digest>"



*** esercizio C05 *** fileappend_multithread***
[difficoltà: facile]
scrivere un programma che crea un file (sovrascrive i contenuti);
vengono creati 10 thread, ciascun thread scrive 100 righe di testo aggiungendo aggiungendo ogni riga alla fine del file.

il file che risulta è del tipo:
[thread] 0 row=0
[thread] 3 row=0
[thread] 4 row=0
[thread] 0 row=1
...

[il "trucco" è considerare che la scrittura alla fine di un file aperto con O_APPEND è atomica [NON occorre usare semafori etc]
altrimenti dovrei fare: lseek e poi write ovvero due operazioni che nell'insieme non sono una operazione atomica]

parte 2 dell'esercizio:

scrivere lo stesso programma SENZA usare O_APPEND (quindi usare mutex)



*** esercizio C06 ***  ordina contenuti di un file (contentente numeri interi)
[difficoltà: medio]
il programma prende un file, contenente numeri interi (un numero per riga); 
il file è già fornito.
esempio contenuti del file:
100
-5678
3
1298
-345
-66767
...

il programma produce una copia del file, dove i numeri sono ordinati in ordine crescente.
il numero di righe del file di ingresso è arbitrario.

versione 2:
il file originale viene sovrascritto con il risultato dell'ordinamento del punto precedente.



*** esercizio C07 *** 
[difficoltà: difficile]
scrivere il seguente programma:

processo padre crea un file, sovrascrivendo il contenuto (lo apre per leggere e scrivere)
crea un processo figlio; processo padre e processo figlio condividono un mutex (realizzato con un semaforo, con o senza nome, scegliete voi);

il processo figlio scrive N (è una costante) numeri interi (uno per riga); ottiene i numeri interi da rand(), usando seed=1000; ogni volta che scrive una riga, il processo figlio acquisisce il mutex e lo rilascia quando la ha scritta; e così via.

il processo padre monitora il file; ogni volta che rileva una scrittura nel file, il processo padre acquisisce il mutex, fa il sort crescente dei numeri scritti nel file fino al quel momento, rilascia il mutex, riprende a monitorare il file; quando il processo figlio termina, anche il processo padre termina.



*** esercizio C08 *** 
[difficoltà: medio]
è dato un array di int, chiamato global_array, di dimensione N (es. N=1024)

il thread t1 inizializza l'array: global_array[i] = N-i-1 

ogni volta che t1 modifica global_array (quindi ogni volta che modifica un elemento dell'array), t1 si ferma, t1 "avvisa" t2 che effettua il sort crescente di tutto global_array. quando t2 ha finito il sort, t1 può continuare e t2 si mette in "attesa".
quindi: t1 modificherà N volte l'array e farà effettuare N volte il sort a t2.
[non vale che sia t1 a creare ogni volta un nuovo thread t2]
quanto t1 termina, anche t2 termina. 